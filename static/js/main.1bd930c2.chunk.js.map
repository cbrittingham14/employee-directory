{"version":3,"sources":["components/TableHead.js","components/Table.js","components/Employee.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["TableHead","scope","Table","props","className","children","Employee","toRender","sorted","arrayToRender","emp","filter","isSorted","shouldSort","filtered","first","firstName","toLowerCase","last","lastName","indexOf","sort","a","b","nameA","department","nameB","comparison","reverse","map","i","key","id","role","Container","state","employees","text","handleInputChange","e","setState","target","value","clearSort","setReverseSort","clearButton","type","onClick","sortCategory","preventDefault","this","name","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1bd930c2.chunk.js","sourcesContent":["import React from 'react';\n\nconst TableHead = () => {\n  return (\n    <thead>\n    <tr>\n      <th scope=\"col\">ID</th>\n      <th scope=\"col\">First Name</th>\n      <th scope=\"col\">Last Name</th>\n      <th scope=\"col\">Role</th>\n      <th scope=\"col\">Department</th>\n    </tr>\n  </thead>\n  );\n};\n\nexport default TableHead;","import React from 'react';\r\n// import TableHead from './TableHead';\r\n\r\nconst Table = (props) => {\r\n  return (\r\n\t\t<table className='table'>\r\n      {props.children}\r\n\t\t</table>\r\n  );\r\n};\r\n\r\nexport default Table;","import React from 'react';\r\nimport TableHead from './TableHead';\r\nimport Table from './Table';\r\n\r\nconst Employee = ({ emp, filter, isSorted, shouldSort }) => {\r\n\r\n\tconst employees = emp;\r\n\tlet toRender;\r\n\tlet sorted;\r\n\tlet arrayToRender;\r\n\r\n\t//compare function to sort departments alphabetically\r\n\tconst compare = (a,b) => {\r\n\t\tconst nameA = a.department.toLowerCase();\r\n\t\tconst nameB = b.department.toLowerCase();\r\n\t\tlet comparison = 0;\r\n\t\tif(nameA > nameB){\r\n\t\t\tcomparison = 1;\r\n\t\t} else if (nameA < nameB){\r\n\t\t\tcomparison = -1;\r\n\t\t}\r\n\t\treturn comparison;\r\n\t}\r\n\t\r\n\t//returns an array of employees whos names match the filter text\r\n\tconst filtered = employees.filter(emp =>{\r\n\t\tlet first = emp.firstName.toLowerCase();\r\n\t\tlet last = emp.lastName.toLowerCase();\r\n\t\treturn (first.indexOf(filter) >= 0||last.indexOf(filter) >= 0);\r\n\t});\r\n\r\n\t// get sorted array and reverse if required\r\n\tsorted = [...filtered].sort(compare);\r\n\tif(shouldSort && !isSorted){\r\n\t\tsorted.reverse();\r\n\t}\r\n\tarrayToRender = sorted;\r\n\r\n\t//display unsorted array, filtered if there is a filter\r\n\tif (!shouldSort){\r\n\t\tarrayToRender = filtered;\r\n\t}\r\n\t//sets up the employee information to render in the view\r\n\ttoRender = arrayToRender.map(i => \r\n\t\t<tbody key={i.id}>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>{i.id}</td>\r\n\t\t\t\t<td>{i.firstName}</td>\r\n\t\t\t\t<td>{i.lastName}</td>\r\n\t\t\t\t<td>{i.role}</td>\r\n\t\t\t\t<td>{i.department}</td>\r\n\t\t\t</tr>\r\n\t\t</tbody>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<Table>\r\n\t\t\t<TableHead />\r\n\t\t\t{toRender}\r\n\t\t</Table>\r\n\t);\r\n};\r\n\r\nexport default Employee;","import React, { Component } from 'react';\r\nimport employees from '../employees.json';\r\nimport Employee from './Employee';\r\n\r\nclass Container extends Component {\r\n\t\r\n\tstate = {\r\n\t\temployees,\r\n\t\tfilter: '',\r\n\t\tisSorted: false,\r\n\t\tshouldSort: false\r\n\t};\r\n\r\n\tclearButton;\r\n\ttext = '';\r\n\r\n\tcomponentDidUpdate(){\r\n\t\tthis.setReverseSort();\r\n\t}\r\n\t//update the state with the filter text from the input\r\n\thandleInputChange = e => {\r\n\t\tthis.setState({\r\n\t\t\tfilter: e.target.value\r\n\t\t});\r\n\t};\r\n\r\n\t//reset the state to initial value\r\n\tclearSort = () => {\r\n\t\tthis.setState({\r\n\t\t\tisSorted: false,\r\n\t\t\tshouldSort: false\r\n\t\t});\r\n\t};\r\n\t//update the view with the clear sort button if needed\r\n\tsetReverseSort = () =>{\r\n\t\tthis.clearButton = (<p />);\r\n\t\tif(this.state.shouldSort){\r\n\t\t\tthis.clearButton = (\r\n\t\t\t\t<button type='submit' onClick={this.clearSort} className='btn-warning'>\r\n\t\t\t\tClear Sort\r\n\t\t\t\t</button>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\t//change state to sort \r\n\tsortCategory = e => {\r\n\t\te.preventDefault();\r\n\t\tthis.setState({\r\n\t\t\tisSorted: !this.state.isSorted,\r\n\t\t\tshouldSort: true\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<div className='row'>\r\n\t\t\t\t\t<div className='col'>\r\n\t\t\t\t\t\t<form className=\"form\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tvalue={this.state.filter}\r\n\t\t\t\t\t\t\t\tname=\"filter\"\r\n\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Filter by Name\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='col'>\r\n\t\t\t\t\t\t<button type=\"submit\" onClick={this.sortCategory} className=\"btn btn-success\">\r\n\t\t\t\t\t\tSort by Dept.\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='col'>\r\n\t\t\t\t\t\t{this.clearButton}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='row'> \r\n\t\t\t\t\t<div className='col'>\r\n\t\t\t\t\t\t<Employee \r\n\t\t\t\t\t\temp={this.state.employees} \r\n\t\t\t\t\t\tfilter={this.state.filter} \r\n\t\t\t\t\t\tisSorted={this.state.isSorted}\r\n\t\t\t\t\t\tshouldSort={this.state.shouldSort}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n    \r\n};\r\n\r\nexport default Container;","import React from 'react';\nimport './App.css';\nimport './components/Container';\nimport Container from './components/Container';\n\n\nfunction App() {\n  \n  return (\n    <div className=\"container\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}